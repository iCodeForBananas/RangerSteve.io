{% extends 'layouts/master.njk' %}

{% block title %}Leaderboards | RangerSteve.io{% endblock %}

{% block content %}
<section class="container pv8 ph8 h100" id="leaderboards-container" v-cloak>
  <div class="row">
    <div class="col-md-10 col-md-offset-1">
      <h1 class="ff-bangers tcw text-stroke ft35 mb1 text-center">Leaderboards</h1>

      <div class="well">
        <div class="table-responsive">
          <table class="table table-hover tcw mb0 table-text-right">
            <thead>
              <tr>
                <th>&nbsp;</th>
                <th class="text-left">Name</th>
                <th class="pointer" v-on:click="setSortColumn('score')">Score <span v-if="sortColumn === 'score'">▼</span></th>
                <th class="pointer" v-on:click="setSortColumn('secondsInRound')">Time In Game <span v-if="sortColumn === 'secondsInRound'">▼</span></th>
                <th class="pointer" v-on:click="setSortColumn('kdr')">KDR <span v-if="sortColumn === 'kdr'">▼</span></th>
                <th class="pointer" v-on:click="setSortColumn('killsPerMinute')">Kills / Min <span v-if="sortColumn === 'killsPerMinute'">▼</span></th>
                <th class="pointer" v-on:click="setSortColumn('scorePerMinute')">Score / Min <span v-if="sortColumn === 'scorePerMinute'">▼</span></th>
                <th class="pointer" v-on:click="setSortColumn('winPercentage')">Win Percentage <span v-if="sortColumn === 'winPercentage'">▼</span></th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(playerScore, index) in playerScores" class="pointer" v-on:click="openBattleStats(playerScore.name)">
                <td>${ index + 1 }</td>
                <td class="fwbold text-left">${ playerScore.name }</td>
                <td>${ playerScore.score }</td>
                <td>${ playerScore.timeInGame }</td>
                <td>${ playerScore.kdr }</td>
                <td>${ playerScore.killsPerMinute }</td>
                <td>${ playerScore.scorePerMinute }</td>
                <td>${ playerScore.winPercentage }%</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
<script>
  new Vue({
    el: '#leaderboards-container',
    delimiters: ['${', '}'],
    data: {
      leaderboards: {},
      usernameLookup: {},
      playerScores: {},
      sortColumn: 'score'
    },
    beforeMount: function() {
      this.fetchLeaderboards()
    },
    methods: {
      setSortColumn: function (column) {
        this.sortColumn = column
        this.fetchLeaderboards()
      },
      openBattleStats: function (playerName) {
        window.location = '/battle-stats/' + playerName
      },
      fetchLeaderboards: function () {
        var self = this
        var ref = firebase.database()
          .ref('leaderboards')
          .once('value', function(snapshot) {
            self.leaderboards = snapshot.val()
            self.fetchUsernameLookup()
          })
      },
      fetchUsernameLookup: function () {
        var self = this
        var ref = firebase.database()
          .ref('username_lookup')
          .once('value', function(snapshot) {
            self.usernameLookup = snapshot.val()
            self.renderLeaderboards()
          })
      },
      timeInGame: function(secondsInRound) {
        var hours = Math.floor(secondsInRound / 3600)
        var minutes = _.padStart(Math.floor(secondsInRound % 3600 / 60), 2, '0')
        var seconds = _.padStart(Math.floor(secondsInRound % 60), 2, '0')

        return `${hours}:${minutes}:${seconds}`
      },
      renderLeaderboards: function () {
        var self = this
        if (! this.leaderboards) return

        // Flip the object of uid: username -> username: uid
        var newUsernameLookup = {}
        Object.keys(this.usernameLookup)
          .forEach(function (username) {
            var playerId = self.usernameLookup[username]
            newUsernameLookup[playerId] = username
          })

        // Construct a new array of player objects
        // containing their name and leaderboard
        // record stats
        this.playerScores = Object.keys(this.leaderboards)
          .map(function (id) {
            var newPlayerObj = self.leaderboards[id]
            if (!newUsernameLookup[id]) console.error(id, 'not found in username lookup.')
            newPlayerObj.name = newUsernameLookup[id]
            return self.leaderboards[id]
          })

        // Calculate special stats for each player
        this.playerScores.forEach(function (playerScore) {
          // Calculate kill death ratio
          playerScore.kdr = (playerScore.deaths > 0
            ? playerScore.kills / playerScore.deaths
            : playerScore.kills).toFixed(2)

          // Calculate kills per minute
          var minutesInRound = playerScore.secondsInRound / 60
          playerScore.killsPerMinute = minutesInRound > 0 ?
            (playerScore.kills / minutesInRound).toFixed(1)
            : 0

          // Calculate score per minute
          playerScore.scorePerMinute = minutesInRound > 0
            ? (playerScore.score / minutesInRound).toFixed(1)
            : 0

          // Caluclate win percentage
          var roundsWon = _.get(playerScore, 'roundsWon', 0)
          var roundsLost = _.get(playerScore, 'roundsLost', 0)
          var totalRounds = roundsWon + roundsLost
          playerScore.winPercentage = totalRounds > 0
            ? (roundsWon / (roundsWon + roundsLost) * 100).toFixed(0)
            : 0

          playerScore.timeInGame = self.timeInGame(playerScore.secondsInRound)
        })

        this.playerScores = this.playerScores.sort(function (a, b) {
          return b[self.sortColumn] - a[self.sortColumn]
        })
      }
    }
  })
</script>
{% endblock %}
