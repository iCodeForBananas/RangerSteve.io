{% extends 'master.nunjucks' %}

{% block title %}Leaderboards | RangerSteve.io{% endblock %}

{% block content %}
<span id="beta-label">Beta</span>

<section class="main-section" id="leaderboards-container" v-cloak>
  <div class="text-center">
    <span class="main-header">
      Leaderboards
    </span>
  </div>

  <div class="container">
    <div class="col-md-10 col-md-offset-1">
      <div class="well">
        <div class="row mb3">
          <div class="col-xs-6">
            <a class="btn btn-primary btn-lg btn-block" href="/">Back to Menu</a>
          </div>
          <div class="col-xs-6">
            <a class="btn btn-success btn-lg btn-block" href="/game">Play Now</a>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-middle tcw mb0">
            <thead>
              <tr>
                <th>Name</th>
                <th>Score</th>
                <th>KDR</th>
                <th>Kills / Min</th>
                <th>Score / Min</th>
                <th>Win Percentage</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="playerScore in playerScores">
                <td><a class="tcw fwbold" v-bind:href="'/battle-stats/' + playerScore.name">${ playerScore.name }</a></td>
                <td>${ playerScore.score }</td>
                <td>${ playerScore.kdr }</td>
                <td>${ playerScore.killsPerMinute }</td>
                <td>${ playerScore.scorePerMinute }</td>
                <td>${ playerScore.winPercentage }</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
<script>
  function compare (a, b) {
    if (a.score > b.score)
      return -1
    if (a.score < b.score)
      return 1
    return 0
  }

  new Vue({
    el: '#leaderboards-container',
    delimiters: ['${', '}'],
    data: {
      leaderboards: {},
      usernameLookup: {},
      playerScores: {}
    },
    beforeMount: function() {
      this.fetchLeaderboards()
    },
    methods: {
      fetchLeaderboards: function () {
        var self = this
        var ref = firebase.database()
          .ref('leaderboards')
          .once('value', function(snapshot) {
            self.leaderboards = snapshot.val()
            self.fetchUsernameLookup()
          })
      },
      fetchUsernameLookup: function () {
        var self = this
        var ref = firebase.database()
          .ref('username_lookup')
          .once('value', function(snapshot) {
            self.usernameLookup = snapshot.val()
            self.renderLeaderboards()
          })
      },
      renderLeaderboards: function () {
        var self = this
        if (! this.leaderboards) return

        // Flip the object of uid: username -> username: uid
        var newUsernameLookup = {}
        Object.keys(this.usernameLookup)
          .forEach(function (username) {
            var playerId = self.usernameLookup[username]
            newUsernameLookup[playerId] = username
          })

        // Construct a new array of player objects
        // containing their name and leaderboard
        // record stats
        this.playerScores = Object.keys(this.leaderboards)
          .map(function (id) {
            var newPlayerObj = self.leaderboards[id]
            newPlayerObj.name = newUsernameLookup[id]
            return self.leaderboards[id]
          })
          .sort(compare)

        // Calculate special stats for each player
        this.playerScores.forEach(function (playerScore) {
          // Calculate kill death ratio
          playerScore.kdr = playerScore.deaths > 0
            ? (playerScore.kills / playerScore.deaths).toFixed(2)
            : playerScore.kills

          // Calculate kills per minute
          var minutesInRound = playerScore.secondsInRound / 60
          playerScore.killsPerMinute = minutesInRound > 0 ?
            (playerScore.kills / minutesInRound).toFixed(1)
            : 0

          // Calculate score per minute
          playerScore.scorePerMinute = minutesInRound > 0
            ? (playerScore.score / minutesInRound).toFixed(1)
            : 0

          // Caluclate win percentage
          var roundsWon = _.get(playerScore, 'roundsWon', 0)
          var roundsLost = _.get(playerScore, 'roundsLost', 0)
          var totalRounds = roundsWon + roundsLost
          playerScore.winPercentage = totalRounds > 0
            ? (roundsWon / (roundsWon + roundsLost) * 100).toFixed(0) + '%'
            : '0%'
        })
      }
    }
  })
</script>
{% endblock %}
