{% extends 'master-minimal.njk' %}

{% block title %}Map Editor | RangerSteve.io{% endblock %}

{% block head %}
  <style>
    body {
      overflow: auto;
      background: #333;
      color: #FFF;
      padding-top: 55px;
    }

    .btn-default,
    .btn-default:hover,
    .btn-default:focus,
    .btn-default:active:hover,
    .btn-default:active:focus {
      color: #222;
      border-color: #d9d9d9;
    }

    #map-editor {
      position: relative;
    }

    #background-canvas {
      position: absolute;
    }

    #foreground-canvas {
      position: absolute;
      cursor: crosshair;
    }
  </style>
{% endblock %}

{% block content %}
  <nav class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#rs-navbar-collapse"
                aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/" style="font-family: Bangers, Arial; font-size: 36px; line-height: 28px;">RangerSteve.io</a>
      </div>

      <div class="collapse navbar-collapse" id="rs-navbar-collapse">
        <h4 class="navbar-text">Map Editor</h4>
        <form class="navbar-form navbar-left">
          <div class="form-group">
            <label for="background-file">Background:</label> <input type="file" id="background-file">
          </div>

          <button type="button" class="btn btn-primary navbar-btn" onclick="closeCurrentPolygon()">Close Polygon</button>
          <button type="button" class="btn btn-default navbar-btn" onclick="undo()">Undo</button>
          <button type="button" class="btn btn-danger navbar-btn" onclick="clearForeground()">Clear</button>
        </form>

        <div class="navbar-form navbar-right">
          <button type="button" class="btn btn-success navbar-btn" onclick="importPolygons()">Import</button>
          <button type="button" class="btn btn-primary navbar-btn" onclick="exportPolygons()">Export</button>
        </div>
      </div>
    </div>
  </nav>

  <div id="map-editor">
    <canvas id="background-canvas">
      Your browser does not support the HTML5 canvas tag.
    </canvas>
    <canvas id="foreground-canvas"></canvas>
  </div>

{% endblock %}

{% block scripts %}
  <script>
    var backgroundCanvas = document.getElementById('background-canvas')
    var backgroundCanvasCtx = backgroundCanvas.getContext('2d')

    var canvas = document.getElementById('foreground-canvas')
    var ctx = canvas.getContext('2d')

    var polygons = []
    var currentPolygon = []

    document.getElementById('background-file').onchange = function () {
      var reader = new FileReader()

      reader.onload = function (event) {
        var img = new Image()
        img.src = event.target.result

        canvas.width = backgroundCanvas.width = img.width
        canvas.height = backgroundCanvas.height = img.height

        backgroundCanvasCtx.drawImage(img, 0, 0, backgroundCanvas.width, backgroundCanvas.height)

        refresh()
      }

      reader.readAsDataURL(this.files[0])
    }

    function closeCurrentPolygon () {
      polygons.push(currentPolygon)
      currentPolygon = []

      refresh()
    }

    function addPoint (event) {
      var rect = canvas.getBoundingClientRect()
      var x = event.clientX - rect.left
      var y = event.clientY - rect.top

      currentPolygon.push([x, y])
      refresh()
    }

    function draw () {
      ctx.lineWidth = 1
      ctx.strokeStyle = 'red'
      ctx.lineCap = 'square'

      ctx.beginPath()

      console.log('* LOG * currentPolygon', JSON.stringify(currentPolygon))
      console.log('* LOG * polygons', JSON.stringify(polygons))

      for (var i = 0; i < currentPolygon.length; i++) {
        var x = currentPolygon[i][0]
        var y = currentPolygon[i][1]

        if (i === 0) {
          ctx.moveTo(x, y)
        } else {
          ctx.lineTo(x, y)
        }
      }

      // Draw finished polygons
      for (var j = 0; j < polygons.length; j++) {
        var polygonPoints = polygons[j]
        for (var i = 0; i < polygonPoints.length; i++) {
          var x = polygonPoints[i][0]
          var y = polygonPoints[i][1]

          if (i === 0) {
            ctx.moveTo(x, y)
          } else {
            ctx.lineTo(x, y)
          }
        }

        if (polygonPoints.length > 0) {
          // Draws line to close polygon
          var x = polygonPoints[0][0]
          var y = polygonPoints[0][1]

          if (i === 0) {
            ctx.moveTo(x, y)
          } else {
            ctx.lineTo(x, y)
          }
        }
      }

      ctx.stroke()
    }

    function undo () {
      console.log('* LOG * undo')
      currentPolygon.pop()

      refresh()
    }

    function clearForeground () {
      console.log('* LOG * clearForeground')

      refresh()
    }

    function refresh () {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      draw()
    }

    function importPolygons () {
      var polygonsString = prompt("Paste polygon coordinates here")

      if (polygonsString != null) {
        polygons = JSON.parse(polygonsString)
        refresh()
      }
    }

    function exportPolygons () {
      console.log(JSON.stringify(polygons))
      prompt('Copy this string', JSON.stringify(polygons))
    }

    canvas.onmousedown = addPoint
    canvas.oncontextmenu = function () {
      return false
    }
  </script>
{% endblock %}
