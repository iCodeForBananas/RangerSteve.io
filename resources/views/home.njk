{% extends 'layouts/master.njk' %}

{% block title %}RangerSteve.io{% endblock %}

{% block content %}
<section class="container pv8 ph8 text-center" id="home-container" v-cloak>
  <h1 class="ff-bangers tcw text-stroke ft45 mb1">Ranger Steve</h1>
  <div class="row h100">
    <div class="col-xs-6 text-center">
      <div class="mb4 col-xs-12">
        <div id="browser-recommendation" class="alert alert-info text-center">
          We recommend using Chrome browser for the best game performance
        </div>

        <div
          class="alert alert-info text-center"
          v-if="showIdlePlayerMessage"
        >
          You have been kicked for being idle for {{ maxIdleSeconds }} seconds.
        </div>

        <div
          class="alert alert-danger"
          v-if="accountErrorMessage"
        >
          ${ accountErrorMessage }
        </div>
        <div
          class="alert alert-success"
          v-if="accountSuccessMessage"
        >
          ${ accountSuccessMessage }
        </div>

        <div class="well">
          <div class="row">
            <div class="col-sm-6">
              <a class="btn btn-success btn-block mb3" href="/game" id="play-button">Play Now</a>
            </div>
            <div class="col-sm-6">
              <a class="btn btn-primary btn-block" href="/rooms">Rooms {{ '(' + numberOfRooms + ')' if numberOfRooms > 0 }} </a>
            </div>
          </div>

          <div class="row mb4">
            <div class="col-xs-12">
              <div class="btn-group btn-group-justified" id="servers-container">
                <a href="https://rangersteve.io" class="server-option btn btn-sm">America</a>
                <a href="https://eu.rangersteve.io" class="server-option btn btn-sm">Europe</a>
              </div>
            </div>
          </div>

          <fieldset class="mb4" v-if="auth">
            <legend>Your Account</legend>

            <div class="row">
              <div class="col-sm-12 col-md-8">
                <div class="form-group">
                  <input
                    @keyup.13="claimUsername()"
                    autofocus
                    class="form-control"
                    maxlength="25"
                    placeholder="Enter your nickname..."
                    style="height: 29px !important; border-radius: 2px !important; border: 0 !important; margin-bottom: 15px !important"
                    type="text"
                    v-model.trim="newUsername"
                  />
                </div>
              </div>
              <div class="col-sm-12 col-md-4">
                <button
                  class="btn btn-sm btn-primary btn-block"
                  :class="{ disabled: isEmptyUsername || isSameUsername }"
                  :disabled="isEmptyUsername || isSameUsername"
                  v-on:click="claimUsername()"
                >
                  Claim Name
                </button>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-12 col-md-4">
                <a
                  class="btn btn-sm btn-primary btn-block"
                  v-if="user"
                  v-bind:href="'/battle-stats/' + user.username"
                >
                  My Battle Stats
                </a>
              </div>
              <div class="col-sm-12 col-md-4">
                {#<a
                  class="btn btn-sm btn-primary btn-block"
                  href="/store"
                >
                  <img src="/images/icons/gold-16.png" /> ${ totalGold } Gold
                </a>#}
              </div>
              <div class="col-sm-12 col-md-4">
                <button
                  class="btn btn-sm btn-warning btn-block"
                  v-on:click="logoutUser()"
                >
                  Logout
                </button>
              </div>
            </div>
          </fieldset>

          <fieldset class="mb4" v-if="!auth">
            <legend>Login With</legend>

            <div class="row">
              <div class="col-xs-4">
                <button
                  class="btn btn-sm btn-block btn-google"
                  v-on:click="attemptLoginWithGoogle()"
                >
                  <i class="fa fa-google" aria-hidden="true"></i> Google
                </button>
              </div>
              <div class="col-xs-4">
                <button
                  class="btn btn-sm btn-block btn-facebook"
                  v-on:click="attemptLoginWithFacebook()"
                >
                  <i class="fa fa-facebook" aria-hidden="true"></i> Facebook
                </button>
              </div>
              <div class="col-xs-4">
                <button
                  class="btn btn-sm btn-block btn-twitter"
                  v-on:click="attemptLoginWithTwitter()"
                >
                  <i class="fa fa-twitter" aria-hidden="true"></i> Twitter
                </button>
              </div>
            </div>
          </fieldset>

          <fieldset class="pb0 mb0">
            <legend>Subscribe To Our Newsletter</legend>
            <div id="mc_embed_signup" class="text-center">
              <form action="//rangersteve.us6.list-manage.com/subscribe/post?u=ee7e3d14e2b1356adb186012a&amp;id=f4a249ec8b" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
                <div id="mc_embed_signup_scroll">
                  <div id="mce-responses" class="clear">
                    <div class="response alert alert-danger" id="mce-error-response" style="display:none"></div>
                    <div class="response alert alert-success" id="mce-success-response" style="display:none"></div>
                  </div>

                  <div class="row">
                    <div class="col-xs-8">
                      <input type="email" placeholder="Enter your email address" value="" name="EMAIL" class="required email form-control" required id="mce-EMAIL" style="border-radius: 2px; border: 0;">
                    </div>
                    <div class="col-xs-4">
                      <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="btn btn-block btn-primary" >
                    </div>
                  </div>

                  <!-- Helps prevents bots from signing up -->
                  <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_ee7e3d14e2b1356adb186012a_f4a249ec8b" tabindex="-1" value=""></div>
                </div>
              </form>
            </div>
            <script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);</script>
          </fieldset>
        </div>
      </div>
    </div>
    <div class="col-xs-6">
      <div class="well">
        <div class="row">
          <div class="col-sm-12 text-left tcw">
            <h3 class="fwbold mt0">How To Play</h3>
            <p>
              This game is about flying around the map and killing as many enemies as you can in highly intensive battles.
            </p>
            <p>
              To play with your friends join a game and then share the link in your address bar with your friends.
            </p>
            <h3 class="fwbold">Controls</h3>
            <table class="table table-condensed tcw">
              <tbody>
                <tr>
                  <td><strong>Fly</strong></td>
                  <td>Right click and hold</td>
                  <td>Press and hold SHIFT</td>
                </tr>
                <tr>
                  <td><strong>Shoot</strong></td>
                  <td>Left click</td>
                  <td></td>
                </tr>
                <tr>
                  <td><strong>Aim</strong></td>
                  <td>Move your mouse</td>
                  <td></td>
                </tr>
                <tr>
                  <td><strong>Jump</strong></td>
                  <td>Press W</td>
                  <td></td>
                </tr>
                <tr>
                  <td><strong>Move left and right</strong></td>
                  <td>Press A and D</td>
                  <td></td>
                </tr>
                <tr>
                  <td><strong>Reload</strong></td>
                  <td>Press R</td>
                  <td></td>
                </tr>
                <tr>
                  <td><strong>Switch weapons</strong></td>
                  <td>Press Q</td>
                  <td></td>
                </tr>
              </tbody>
            </table>

            <h3 class="fwbold">Tips</h3>
            <ul>
              <li>Keep moving, flying, and firing on people as quickly as you can.</li>
              <li>Aim for people's heads because you do the most damage there.</li>
              <li>Try different weapons, some are better against others.</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
<script>
  var firstNames = ['Ranger', 'Real Estate', 'Slim', 'Tree Hugger', 'Mad', 'Sarcastic', 'Cactus', 'Deadeye', 'Pale Face', 'Texas', 'Horseface', 'Crazy', 'Cotton Mouth', 'Whiskey', '3 Fingers', 'Ace', 'Amarillo', 'Apache', 'Bearcat', 'Bitter Creek', 'Black', 'Black Rock', 'Blackjack', 'Bloody', 'Blueridge', 'Brawney', 'Bronco', 'Buck', 'Buckskin', 'Buffalo', 'Bull', 'Bushwack', 'Cajun', 'Captain', 'Cheerful', 'Cherokee', 'Cheyenne', 'Colonel', 'Coonskin', 'Dakota', 'Dead Eye', 'Deadwood', 'Digger', 'Dirty', 'Durango', 'Frontier', 'Gentleman', 'Gravedigger', 'Gunner', 'Hole Card', 'Hoodoo', 'Joker', 'Lawless', 'Lightning', 'Loco', 'Lucky', 'Major', 'Mustang', 'Natchez', 'Navajo', 'Nevada', 'Nightrider', 'One-Eyed', 'Pecos', 'Preacher', 'Rattlesnake', 'Rawhide', 'Red', 'Reno', 'Reverend', 'Riverboat', 'English', 'Insane', 'Shotgun', 'Sweaty', 'Sideways', 'Sidewinder', 'Six Gun', 'Skull', 'Slaughter', 'Slick', 'Slippery', 'Smiley', 'Smokey', 'Snake-bite', 'Snake-eyes', 'Stone River', 'Stumpy', 'Three Rivers', 'Tombstone', 'Trapper', 'Two Gun', 'Ugly', 'Waco', 'Whip', 'Whiskey', 'Whitey', 'Wichitaw', 'Wild', 'Trigger Finger', 'Lead Engineer', 'Waterfall', 'Black', 'Milktoast', 'Dogface', 'Grunt', 'Leatherneck', 'Rebel', 'Stealthy', 'Flasher', 'Nasty', 'Frantic', 'Armored', 'Noob', 'Commando', 'Ninja', 'Silver', 'Salty', 'Wrecker', 'Frenzied']
  var lastNames = ['Rick', 'Steve', 'Andrew', 'Mike', 'Jim', 'James', 'Josh', 'Nick', 'Rob', 'John', 'Luke']

  function getRandomName () {
    return _.sample(firstNames) + ' ' + _.sample(lastNames)
  }

  new Vue({
    el: '#home-container',
    delimiters: ['${', '}'],
    data: {
      accountSuccessMessage: null,
      accountErrorMessage: null,
      showIdlePlayerMessage: localStorage.getItem('showIdlePlayerMessage'),
      newUsername: null,
      auth: null,
      user: null,
      transactions: null,
    },
    computed: {
      totalGold: function () {
        var self = this
        if (!this.transactions) return 0
        return Object.keys(this.transactions)
          .map(function (key) {
            return Number(self.transactions[key].gold)
          })
          .reduce(function (a, b) {
            return a + b
          })
      },
      isSameUsername: function () {
        return this.user && this.user.username === this.newUsername
      },
      isEmptyUsername: function () {
        return !this.newUsername || this.newUsername.length === 0
      },
    },
    beforeMount: function() {
      this.checkAuthStatus()
    },
    methods: {
      addAccountSuccessMessage: function (msg) {
        var self = this
        this.accountSuccessMessage = msg
        this.accountErrorMessage = null
        setTimeout(function () {
          self.accountSuccessMessage = null
        }, 5000)
      },
      addAccountErrorMessage: function (msg) {
        var self = this
        this.accountErrorMessage = msg
        this.accountSuccessMessage = null
        setTimeout(function () {
          self.accountErrorMessage = null
        }, 5000)
      },
      checkAuthStatus: function () {
        var self = this
        // Check if the user is signed in
        firebase.auth().onAuthStateChanged(function(auth) {
          if (!auth) return
          self.auth = auth
          self.fetchUser()
          self.fetchUserTransactions()
        })
      },
      fetchUserTransactions: function() {
        var self = this
        firebase.database()
          .ref('user_transactions/' + self.auth.uid)
          .once('value', function(snapshot) {
            self.transactions = snapshot.val()
            self.$forceUpdate()
          })
      },
      fetchUser: function () {
        var self = this
        firebase.database()
          .ref('users/' + self.auth.uid)
          .once('value', function(snapshot) {
            self.user = snapshot.val()
            if (!self.user) {
              self.newUsername = getRandomName()
              self.claimUsername()
              return
            }
            self.newUsername = self.user.username
          })
      },
      goToBattleStats: function () {
        window.location.href = '/battle-stats/' + this.user.username
      },
      claimUsername: function () {
        var self = this
        if (!this.auth) {
          self.addAccountErrorMessage('You must be signed in to claim a username.')
          return
        }

        if (this.isEmptyUsername) {
          self.addAccountErrorMessage('Username cannot be empty.')
          return
        }

        if (this.isSameUsername) {
          self.addAccountErrorMessage('Username is the same as your current one.')
          return
        }

        if (this.user) {
          /**
           * Remove username from lookup before writing new username.
           */
          firebase.database()
            .ref('username_lookup/' + this.user.username)
            .remove(function(err) {
              if (err) {
                console.error(err)
                self.addAccountErrorMessage('Username is taken, please try a different one.')
                return
              }

              self.writeUsernameLookupData()
            })
          return
        }
        self.writeUsernameLookupData()
      },
      writeUsernameLookupData: function () {
        var self = this
        firebase.database()
        .ref('username_lookup/' + self.newUsername)
        .set(self.auth.uid, function(err) {
          if (err) {
            console.error(err)
            self.addAccountErrorMessage('There was a problem changing your username.')
            return
          }

          self.writeUserData()
        })
      },
      writeUserData: function () {
        var self = this
        firebase.database()
          .ref('users/' + self.auth.uid)
          .set({
            username: self.newUsername,
          }, function (err) {
            if (err) {
              console.error(err)
              self.addAccountErrorMessage('We were unable to update your user data.')
            }
          })

        this.addAccountSuccessMessage('Changes saved!')
        this.fetchUser()
      },
      logoutUser: function () {
        var self = this
        firebase.auth().signOut().then(function() {
          // Sign-out successful.
          self.auth = null
          self.user = null
        }, function(error) {
          // An error happened.
          console.error(error)
        })
      },
      attemptLoginWithGoogle: function () {
        var self = this
        var provider = new firebase.auth.GoogleAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.error(error)
          self.addAccountErrorMessage(error.message)
        })
      },
      attemptLoginWithFacebook: function () {
        var self = this
        var provider = new firebase.auth.FacebookAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.error(error)
          self.addAccountErrorMessage(error.message)
        })
      },
      attemptLoginWithTwitter: function () {
        var self = this
        var provider = new firebase.auth.TwitterAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.log(error)
          self.addAccountErrorMessage(error.message)
        })
      }
    }
  })

  localStorage.removeItem('showIdlePlayerMessage')

  if (! isChromeBrowser()) showBrowserRecommendation()

  if (
      window.location.href.indexOf('https://rangersteve.io') > -1 ||
      window.location.href.indexOf('http://localhost') > -1
  ) {
      $('#servers-container').find('a:first-child').addClass('active')
  } else if (window.location.href.indexOf('https://eu.rangersteve.io') > -1) {
      $('#servers-container').find('a:last-child').addClass('active')
  }

  function isChromeBrowser() {
      return navigator.userAgent.indexOf('Chrome') > -1
  }

  function showBrowserRecommendation() {
      $('#browser-recommendation').show()
  }
</script>
{% endblock %}
