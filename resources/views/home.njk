{% extends 'layouts/master.njk' %}

{% block title %}RangerSteve.io{% endblock %}

{% block content %}
<section class="container tcw pv8 ph8 text-center" id="home-container" v-cloak>
  <h1 class="ff-bangers tcw text-stroke ft45 mb1">R<small class="tcw">anger</small>S<small class="tcw">teve.io</small></h1>
  <div class="row h100">
    <div class="col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">
      <div id="browser-recommendation" class="alert alert-info text-center">
        We recommend using Chrome browser for the best game performance
      </div>

      <div
        class="alert alert-info text-center"
        v-if="showIdlePlayerMessage"
      >
        You have been kicked for being idle for {{ maxIdleSeconds }} seconds.
      </div>

      <div
        class="alert alert-danger"
        v-if="accountErrorMessage"
      >
        ${ accountErrorMessage }
      </div>
      <div
        class="alert alert-success"
        v-if="accountSuccessMessage"
      >
        ${ accountSuccessMessage }
      </div>

      <div class="well mb0 bra0">
        <div class="row">
          <div class="col-sm-6">
            <a class="btn btn-success btn-block mb3" href="/game">Play Now</a>
          </div>
          <div class="col-sm-6">
            <a class="btn btn-primary btn-block mb3" href="/rooms">Rooms {{ '(' + numberOfRooms + ')' if numberOfRooms > 0 }}</a>
          </div>
        </div>

        <a
          class="btn btn-warning btn-block mb3 btn-lg"
          href="/buy"
          v-if="!isUserPremium"
        >
          Buy Premium Access Now!
        </a>

        <div class="row mb0">
          <div class="col-xs-12">
            <h3 class="mt0 ft10 fwbold">
              Choose Your Region
            </h3>

            <div class="btn-group btn-group-justified" id="servers-container">
              <a href="https://rangersteve.io" class="server-option btn btn-sm">America</a>
              <a href="https://eu.rangersteve.io" class="server-option btn btn-sm">Europe</a>
            </div>
          </div>
        </div>
      </div>

      <div class="well mb0 bra0 bg-lily-meadow">
        <div class="pv2">
          <div v-if="auth">
            <h3 class="mt0 ft10 fwbold">
              <span v-if="isUserPremium"><img src="/images/icons/gold-crown.png" height="18px" style="margin-top: -4px;" /> Premium</span>
              <span v-if="!isUserPremium">Your</span>
              Account
            </h3>

            <h4 class="text-center text-strong text-yellow">${ rank }</h4>

            <div class="row">
              <div class="col-sm-8">
                <div class="form-group">
                  <input
                    @keyup.13="claimUsername()"
                    autofocus
                    class="form-control"
                    maxlength="25"
                    placeholder="Enter your nickname..."
                    style="height: 29px !important; border-radius: 2px !important; border: 0 !important; margin-bottom: 15px !important"
                    type="text"
                    v-model.trim="newUsername"
                  />
                </div>
              </div>
              <div class="col-sm-4">
                <button
                  class="btn btn-sm btn-primary btn-block"
                  :class="{ disabled: isEmptyUsername || isSameUsername }"
                  :disabled="isEmptyUsername || isSameUsername"
                  v-on:click="claimUsername()"
                >
                  Claim Name
                </button>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-6">
                <a
                  class="btn btn-sm btn-primary btn-block"
                  v-if="user"
                  v-bind:href="'/battle-stats/' + user.username"
                >
                  My Battle Stats
                </a>
              </div>
              <div class="col-sm-6">
                <button
                  class="btn btn-sm btn-block btn-outline"
                  v-on:click="logoutUser()"
                >
                  Logout
                </button>
              </div>
            </div>
          </div>

          <div v-if="!auth">
            <h3 class="mt0 ft10 fwbold">Login With</h3>
            <div class="row">
              <div class="col-sm-4">
                <button
                  class="btn btn-sm btn-block btn-google"
                  v-on:click="attemptLoginWithGoogle()"
                >
                  <i class="fa fa-google" aria-hidden="true"></i> Google
                </button>
              </div>
              <div class="col-sm-4">
                <button
                  class="btn btn-sm btn-block btn-facebook"
                  v-on:click="attemptLoginWithFacebook()"
                >
                  <i class="fa fa-facebook" aria-hidden="true"></i> Facebook
                </button>
              </div>
              <div class="col-sm-4">
                <button
                  class="btn btn-sm btn-block btn-twitter"
                  v-on:click="attemptLoginWithTwitter()"
                >
                  <i class="fa fa-twitter" aria-hidden="true"></i> Twitter
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="well mb0 bra0">
        <div class="pv2">
          <h3 class="mt0 ft10 fwbold">Subscribe To Our Newsletter</h3>
          <div id="mc_embed_signup" class="text-center">
            <form action="//rangersteve.us6.list-manage.com/subscribe/post?u=ee7e3d14e2b1356adb186012a&amp;id=f4a249ec8b" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
              <div id="mc_embed_signup_scroll">
                <div id="mce-responses" class="clear">
                  <div class="response alert alert-danger" id="mce-error-response" style="display:none"></div>
                  <div class="response alert alert-success" id="mce-success-response" style="display:none"></div>
                </div>

                <div class="row">
                  <div class="col-sm-8">
                    <input type="email" placeholder="Enter your email address" value="" name="EMAIL" class="required email form-control" required id="mce-EMAIL" style="border-radius: 2px; border: 0;">
                  </div>
                  <div class="col-sm-4">
                    <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="btn btn-block btn-primary" >
                  </div>
                </div>

                <!-- Helps prevents bots from signing up -->
                <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_ee7e3d14e2b1356adb186012a_f4a249ec8b" tabindex="-1" value=""></div>
              </div>
            </form>
          </div>
          <script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);</script>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
<script>
  var ranks = {{ ranks | dump | safe }}
  var firstNames = ['Ranger', 'Real Estate', 'Slim', 'Tree Hugger', 'Mad', 'Sarcastic', 'Cactus', 'Deadeye', 'Pale Face', 'Texas', 'Horseface', 'Crazy', 'Cotton Mouth', 'Whiskey', '3 Fingers', 'Ace', 'Amarillo', 'Apache', 'Bearcat', 'Bitter Creek', 'Black', 'Black Rock', 'Blackjack', 'Bloody', 'Blueridge', 'Brawney', 'Bronco', 'Buck', 'Buckskin', 'Buffalo', 'Bull', 'Bushwack', 'Cajun', 'Captain', 'Cheerful', 'Cherokee', 'Cheyenne', 'Colonel', 'Coonskin', 'Dakota', 'Dead Eye', 'Deadwood', 'Digger', 'Dirty', 'Durango', 'Frontier', 'Gentleman', 'Gravedigger', 'Gunner', 'Hole Card', 'Hoodoo', 'Joker', 'Lawless', 'Lightning', 'Loco', 'Lucky', 'Major', 'Mustang', 'Natchez', 'Navajo', 'Nevada', 'Nightrider', 'One-Eyed', 'Pecos', 'Preacher', 'Rattlesnake', 'Rawhide', 'Red', 'Reno', 'Reverend', 'Riverboat', 'English', 'Insane', 'Shotgun', 'Sweaty', 'Sideways', 'Sidewinder', 'Six Gun', 'Skull', 'Slaughter', 'Slick', 'Slippery', 'Smiley', 'Smokey', 'Snake-bite', 'Snake-eyes', 'Stone River', 'Stumpy', 'Three Rivers', 'Tombstone', 'Trapper', 'Two Gun', 'Ugly', 'Waco', 'Whip', 'Whiskey', 'Whitey', 'Wichitaw', 'Wild', 'Trigger Finger', 'Lead Engineer', 'Waterfall', 'Black', 'Milktoast', 'Dogface', 'Grunt', 'Leatherneck', 'Rebel', 'Stealthy', 'Flasher', 'Nasty', 'Frantic', 'Armored', 'Noob', 'Commando', 'Ninja', 'Silver', 'Salty', 'Wrecker', 'Frenzied']
  var lastNames = ['Rick', 'Steve', 'Andrew', 'Mike', 'Jim', 'James', 'Josh', 'Nick', 'Rob', 'John', 'Luke']

  function getRandomName () {
    return _.sample(firstNames) + ' ' + _.sample(lastNames)
  }

  new Vue({
    el: '#home-container',
    delimiters: ['${', '}'],
    data: {
      accountSuccessMessage: null,
      accountErrorMessage: null,
      showIdlePlayerMessage: localStorage.getItem('showIdlePlayerMessage'),
      newUsername: null,
      auth: null,
      user: null,
      premiumUserLookup: {},
      score: 0
    },
    computed: {
      rank: function() {
        var rank = ranks[0]

        for (var minScore in ranks) {
          if (this.score >= minScore) rank = ranks[minScore]
          else return rank
        }

        return rank
      },
      isUserPremium: function () {
        return this.auth && this.premiumUserLookup && this.premiumUserLookup[this.auth.uid]
      },
      isSameUsername: function () {
        return this.user && this.user.username === this.newUsername
      },
      isEmptyUsername: function () {
        return !this.newUsername || this.newUsername.length === 0
      },
    },
    beforeMount: function() {
      this.checkAuthStatus()
      this.fetchPremiumUserLookup()
    },
    methods: {
      addAccountSuccessMessage: function (msg) {
        var self = this
        this.accountSuccessMessage = msg
        this.accountErrorMessage = null
        setTimeout(function () {
          self.accountSuccessMessage = null
        }, 5000)
      },
      addAccountErrorMessage: function (msg) {
        var self = this
        this.accountErrorMessage = msg
        this.accountSuccessMessage = null
        setTimeout(function () {
          self.accountErrorMessage = null
        }, 5000)
      },
      checkAuthStatus: function () {
        // Check if the user is signed in
        var self = this
        firebase
          .auth()
          .onAuthStateChanged(function(auth) {
            if (!auth) return
            self.auth = auth
            self.fetchUser()
            self.fetchScore()
          })
      },
      fetchPremiumUserLookup: function() {
        var self = this
        firebase.database()
          .ref('premium_user_lookup')
          .once('value', function(snapshot) {
            self.premiumUserLookup = snapshot.val()
          })
      },
      fetchUser: function () {
        var self = this
        firebase.database()
          .ref('users/' + self.auth.uid)
          .once('value', function(snapshot) {
            self.user = snapshot.val()
            if (!self.user) {
              self.newUsername = getRandomName()
              self.claimUsername()
              return
            }
            self.newUsername = self.user.username
          })
      },
      fetchScore: function () {
        var self = this
        firebase.database()
          .ref('leaderboards/' + self.auth.uid + '/score')
          .once('value', function(snapshot) {
            self.score = snapshot.val()
          })
      },
      goToBattleStats: function () {
        window.location.href = '/battle-stats/' + this.user.username
      },
      claimUsername: function () {
        var self = this
        if (!this.auth) {
          self.addAccountErrorMessage('You must be signed in to claim a username.')
          return
        }

        if (this.isEmptyUsername) {
          self.addAccountErrorMessage('Username cannot be empty.')
          return
        }

        if (this.isSameUsername) {
          self.addAccountErrorMessage('Username is the same as your current one.')
          return
        }

        if (this.user) {
          /**
           * Remove username from lookup before writing new username.
           */
          firebase.database()
            .ref('username_lookup/' + this.user.username)
            .remove(function(err) {
              if (err) {
                console.error(err)
                self.addAccountErrorMessage('Username is taken, please try a different one.')
                return
              }

              self.writeUsernameLookupData()
            })
          return
        }
        self.writeUsernameLookupData()
      },
      writeUsernameLookupData: function () {
        var self = this
        firebase.database()
        .ref('username_lookup/' + self.newUsername)
        .set(self.auth.uid, function(err) {
          if (err) {
            console.error(err)
            self.addAccountErrorMessage('There was a problem changing your username.')
            return
          }

          self.writeUserData()
        })
      },
      writeUserData: function () {
        var self = this
        firebase.database()
          .ref('users/' + self.auth.uid)
          .set({
            username: self.newUsername,
          }, function (err) {
            if (err) {
              console.error(err)
              self.addAccountErrorMessage('We were unable to update your user data.')
            }
          })

        this.addAccountSuccessMessage('Changes saved!')
        this.fetchUser()
      },
      logoutUser: function () {
        var self = this
        firebase.auth().signOut().then(function() {
          // Sign-out successful.
          self.auth = null
          self.user = null
        }, function(error) {
          // An error happened.
          console.error(error)
        })
      },
      attemptLoginWithGoogle: function () {
        var self = this
        var provider = new firebase.auth.GoogleAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.error(error)
          self.addAccountErrorMessage(error.message)
        })
      },
      attemptLoginWithFacebook: function () {
        var self = this
        var provider = new firebase.auth.FacebookAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.error(error)
          self.addAccountErrorMessage(error.message)
        })
      },
      attemptLoginWithTwitter: function () {
        var self = this
        var provider = new firebase.auth.TwitterAuthProvider();
        firebase.auth().signInWithPopup(provider).then(function(result) {
          self.auth = result.user
        }).catch(function(error) {
          console.log(error)
          self.addAccountErrorMessage(error.message)
        })
      }
    }
  })

  localStorage.removeItem('showIdlePlayerMessage')

  if (! isChromeBrowser()) showBrowserRecommendation()

  if (
      window.location.href.indexOf('https://rangersteve.io') > -1 ||
      window.location.href.indexOf('http://localhost') > -1
  ) {
      $('#servers-container').find('a:first-child').addClass('active')
  } else if (window.location.href.indexOf('https://eu.rangersteve.io') > -1) {
      $('#servers-container').find('a:last-child').addClass('active')
  }

  function isChromeBrowser() {
      return navigator.userAgent.indexOf('Chrome') > -1
  }

  function showBrowserRecommendation() {
      $('#browser-recommendation').show()
  }
</script>
{% endblock %}
